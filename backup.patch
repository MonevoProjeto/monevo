diff --git a/backend/main.py b/backend/main.py
index af96fac..068bde9 100644
--- a/backend/main.py
+++ b/backend/main.py
@@ -22,6 +22,7 @@ ALLOWED_ORIGINS = [
         "http://127.0.0.1:5173",   # se acessar pelo 127
         "http://localhost:8080",   # o seu caso atual
         "http://127.0.0.1:8080",   # segurança extra
+        "https://monevobackend-a7f8etedfze0atg6.centralus-01.azurewebsites.net/"
 ]
 
 
diff --git a/backend/models.py b/backend/models.py
index 9450fa3..9c60cf1 100644
--- a/backend/models.py
+++ b/backend/models.py
@@ -28,7 +28,6 @@ class Meta(BaseModel):
     class Config:
         model_config = ConfigDict(from_attributes=True)
 
-
 # MetaCreate --> criação de novas metas (sem id nem data_criacao)
 # quando o cliente inputa os dados para criar uma meta (POST)
 class MetaCreate(BaseModel):
diff --git a/backend/monevo_local.db b/backend/monevo_local.db
index 168e906..c054750 100644
Binary files a/backend/monevo_local.db and b/backend/monevo_local.db differ
diff --git a/frontend/index.html b/frontend/index.html
index 8fe8465..4397f8a 100644
--- a/frontend/index.html
+++ b/frontend/index.html
@@ -7,6 +7,9 @@
     <title>Monevo - Organização Financeira</title>
     <meta name="description" content="Aplicativo de organização financeira pessoal" />
     <meta name="author" content="Monevo" />
+  <!-- Favicon: prefer scalable SVG for crisp rendering, fallback to favicon.ico -->
+  <link rel="icon" href="/placeholder.svg" type="image/svg+xml">
+  <link rel="shortcut icon" href="/favicon-convertido-de-png.svg">
     
     <!-- Google Fonts -->
     <link rel="preconnect" href="https://fonts.googleapis.com">
diff --git a/frontend/public/favicon.ico b/frontend/public/favicon.ico
deleted file mode 100644
index bfb78d0..0000000
Binary files a/frontend/public/favicon.ico and /dev/null differ
diff --git a/frontend/src/App.tsx b/frontend/src/App.tsx
index eb17ad6..45e8473 100644
--- a/frontend/src/App.tsx
+++ b/frontend/src/App.tsx
@@ -6,6 +6,7 @@ import { BrowserRouter, Routes, Route } from "react-router-dom";
 import Landing from "./pages/Landing";
 import Index from "./pages/Index";
 import Auth from "./pages/Auth";
+import Onboarding from "./pages/Onboarding";
 import NotFound from "./pages/NotFound";
 
 const queryClient = new QueryClient();
@@ -19,6 +20,7 @@ const App = () => (
         <Routes>
           <Route path="/" element={<Landing />} />
           <Route path="/auth" element={<Auth />} />
+          <Route path="/onboarding" element={<Onboarding />} />
           <Route path="/index" element={<Index />} />
           {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL "*" ROUTE */}
           <Route path="*" element={<NotFound />} />
diff --git a/frontend/src/api.js b/frontend/src/api.js
index 35ee0ec..f8a6f44 100644
--- a/frontend/src/api.js
+++ b/frontend/src/api.js
@@ -5,6 +5,8 @@ const BASE_URL = import.meta.env.VITE_API_URL ?? 'http://127.0.0.1:8000';
 console.log('[API] BASE_URL =', BASE_URL); // <-- ADICIONE
 export { BASE_URL }; // <-- ADICIONE
 
+// rontend/.env.production
+VITE_API_URL= 'https://monevobackend-a7f8etedfze0atg6.centralus-01.azurewebsites.net/'
 
 // Helper para tratar respostas
 async function handleResponse(res) {
@@ -64,6 +66,25 @@ export async function buscarMeta(metaId) {
   }
 }
 
+// GET /transacoes - listar transacoes com query params simples
+export async function listarTransacoes(params = {}) {
+  try {
+    const qs = new URLSearchParams();
+    Object.entries(params).forEach(([k, v]) => {
+      if (v === undefined || v === null) return;
+      // Dates should be ISO strings
+      if (v instanceof Date) qs.append(k, v.toISOString());
+      else qs.append(k, String(v));
+    });
+    const url = `${BASE_URL}/transacoes${qs.toString() ? `?${qs.toString()}` : ''}`;
+    const response = await fetch(url);
+    return await handleResponse(response);
+  } catch (err) {
+    console.error('Erro ao listar transações:', err);
+    throw err;
+  }
+}
+
 // PUT /metas/{id} - Atualizar meta
 export async function atualizarMeta(metaId, meta) {
   try {
diff --git a/frontend/src/components/AddTransaction.tsx b/frontend/src/components/AddTransaction.tsx
index 3b54dc8..746e7b4 100644
--- a/frontend/src/components/AddTransaction.tsx
+++ b/frontend/src/components/AddTransaction.tsx
@@ -11,6 +11,7 @@ import { format } from "date-fns";
 import { ptBR } from "date-fns/locale";
 import { cn } from "@/lib/utils";
 import { useToast } from "@/hooks/use-toast";
+import { useApp } from "@/contexts/AppContext";
 import CategorySelector from "./CategorySelector";
 const API_URL = import.meta.env.VITE_API_URL ?? "http://127.0.0.1:8000";
 const DEFAULT_USER_ID = Number(import.meta.env.VITE_DEFAULT_USER_ID ?? 1);
@@ -33,6 +34,7 @@ const AddTransaction = ({ onClose }: AddTransactionProps) => {
   const [description, setDescription] = useState<string>("");
   const [date, setDate] = useState<Date>(new Date());
   const { toast } = useToast();
+  const { addTransaction } = useApp();
 
   const transactionTypes = [
     { value: "income", label: "Receita", icon: ArrowUpCircle, color: "text-green-600" },
@@ -82,29 +84,26 @@ const AddTransaction = ({ onClose }: AddTransactionProps) => {
   };
 
   try {
-    const res = await fetch(`${API_URL}/transacoes`, {
-      method: "POST",
-      headers: { "Content-Type": "application/json" },
-      body: JSON.stringify(payload),
+    // Use shared app context to add transaction (optimistic update + server sync)
+    await addTransaction({
+      type: type as 'income' | 'expense' | 'investment',
+      category,
+      description,
+      amount: normalizedAmount,
+      date: payload.data,
     });
 
-    if (!res.ok) {
-      let msg = "";
-      try { msg = await res.text(); } catch {}
-      throw new Error(`HTTP ${res.status}${msg ? ` - ${msg}` : ""}`);
-    }
-
-    // Simular salvamento
     toast({
       title: "Sucesso!",
       description: `${transactionTypes.find(t => t.value === type)?.label} adicionada com sucesso.`,
     });
 
     onClose();
-  } catch (err: any) {
+  } catch (err: unknown) {
+    const message = err instanceof Error ? err.message : String(err);
     toast({
       title: "Falha ao salvar",
-      description: err?.message ?? "Tente novamente.",
+      description: message || "Tente novamente.",
       variant: "destructive",
     });
   }
diff --git a/frontend/src/components/AppSidebar.tsx b/frontend/src/components/AppSidebar.tsx
index e6db5e9..1a6f9af 100644
--- a/frontend/src/components/AppSidebar.tsx
+++ b/frontend/src/components/AppSidebar.tsx
@@ -1,4 +1,5 @@
 import { Home, Target, Brain, Bell, User, Plus, ChevronRight, LogOut, Receipt } from "lucide-react";
+import { useNavigate } from "react-router-dom";
 import {
   Sidebar,
   SidebarContent,
@@ -22,6 +23,7 @@ interface AppSidebarProps {
 export function AppSidebar({ activeTab, onTabChange }: AppSidebarProps) {
   const { state } = useSidebar();
   const isCollapsed = state === "collapsed";
+  const navigate = useNavigate();
 
   const mainItems = [
     { id: "dashboard", label: "Início", icon: Home },
@@ -36,8 +38,15 @@ export function AppSidebar({ activeTab, onTabChange }: AppSidebarProps) {
     <Sidebar collapsible="icon" className="border-r border-border">
       <SidebarHeader className="border-b border-border p-4">
         <div className="flex items-center gap-2">
-          <div className="w-8 h-8 bg-gradient-to-r from-monevo-blue to-monevo-lightBlue rounded-lg flex items-center justify-center">
-            <span className="text-white font-bold text-sm">M</span>
+          <div className="w-8 h-8 rounded-lg overflow-hidden bg-white/0 flex items-center justify-center">
+            {/* Try loading /logo.svg (if you added your file as logo.svg in public), otherwise fallback to /placeholder.svg */}
+            <img
+              src="/logo.png"
+              alt="Monevo"
+              title="Monevo"
+              className="w-8 h-8 object-cover"
+            onError={(e) => { try { (e.currentTarget as HTMLImageElement).src = '/placeholder.svg'; } catch (err) { console.warn('Failed to load fallback logo', err); } }}
+            />
           </div>
           {!isCollapsed && (
             <div>
@@ -101,6 +110,10 @@ export function AppSidebar({ activeTab, onTabChange }: AppSidebarProps) {
           variant="ghost"
           className="w-full justify-start text-muted-foreground hover:text-foreground"
           size={isCollapsed ? "icon" : "default"}
+          onClick={() => {
+            // navigate to login
+            try { navigate('/auth', { replace: true }); } catch (e) { /* ignore */ }
+          }}
         >
           <LogOut className="h-5 w-5" />
           {!isCollapsed && <span className="ml-2">Sair</span>}
diff --git a/frontend/src/components/Dashboard.tsx b/frontend/src/components/Dashboard.tsx
index 38b181f..37adeeb 100644
--- a/frontend/src/components/Dashboard.tsx
+++ b/frontend/src/components/Dashboard.tsx
@@ -1,3 +1,4 @@
+import { useMemo } from "react";
 import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 import { Button } from "@/components/ui/button";
 import { Badge } from "@/components/ui/badge";
@@ -10,25 +11,62 @@ import {
   AlertTriangle,
   Lightbulb,
   Shield,
-  Bell
+  Bell,
+  BarChart3,
+  PieChart as PieChartIcon,
+  Plus,
+  CreditCard,
+  Wallet
 } from "lucide-react";
 
+import { useApp } from "@/contexts/AppContext";
+
+import { 
+  LineChart, 
+  Line, 
+  BarChart, 
+  Bar, 
+  PieChart, 
+  Pie, 
+  Cell,
+  XAxis, 
+  YAxis, 
+  CartesianGrid, 
+  Tooltip, 
+  Legend, 
+  ResponsiveContainer 
+} from 'recharts';
+
 interface DashboardProps {
   onNavigate?: (tab: string) => void;
+  onSetTransactionsFilter?: (filter: "all" | "income" | "expense") => void;
 }
 
-const Dashboard = ({ onNavigate }: DashboardProps) => {
-  const balance = 15420.80;
-  const income = 8500.00;
-  const expenses = 3240.50;
+const Dashboard = ({ onNavigate, onSetTransactionsFilter }: DashboardProps) => {
+  const { transactions, goals } = useApp();
+
+  const income = useMemo(() => transactions
+    .filter(t => t.type === 'income')
+    .reduce((s, t) => s + (t.amount || 0), 0), [transactions]);
+
+  const expenses = useMemo(() => transactions
+    .filter(t => t.type === 'expense')
+    .reduce((s, t) => s + (t.amount || 0), 0), [transactions]);
+
+  const balance = useMemo(() => income - expenses, [income, expenses]);
   const healthScore = 78;
 
-  const recentTransactions = [
-    { id: 1, description: "Salário", amount: 5500.00, type: "income", date: "2024-05-27", category: "Trabalho" },
-    { id: 2, description: "Supermercado", amount: -350.00, type: "expense", date: "2024-05-26", category: "Alimentação" },
-    { id: 3, description: "Freelance", amount: 1200.00, type: "income", date: "2024-05-25", category: "Extra" },
-    { id: 4, description: "Combustível", amount: -180.00, type: "expense", date: "2024-05-24", category: "Transporte" },
-  ];
+  const recentTransactions = useMemo(() => {
+    if (!transactions) return [];
+    // sort by date desc and take first 4
+    return [...transactions]
+      .sort((a, b) => {
+        const da = new Date(a.date).getTime() || 0;
+        const db = new Date(b.date).getTime() || 0;
+        return db - da;
+      })
+      .slice(0, 4);
+  }, [transactions]);
 
   const aiInsights = [
     {
@@ -51,21 +89,106 @@ const Dashboard = ({ onNavigate }: DashboardProps) => {
     }
   ];
 
-  const goals = [
-    { name: "Viagem Europa", progress: 57, target: 15000, current: 8500 },
-    { name: "Reserva Emergência", progress: 49, target: 25000, current: 12300 },
-    { name: "Quitar Cartão", progress: 64, target: 5000, current: 3200 }
+  // use goals from context (converted from API)
+  // compute progress percentage for each goal
+  const visibleGoals = (goals || []).slice(0, 3).map(g => ({
+    id: g.id,
+    name: g.title,
+    target: g.target || 0,
+    current: g.current || 0,
+    progress: g.target ? Math.round((g.current / g.target) * 100) : 0,
+  }));
+
+  // Dados para gráficos derivados de `transactions`
+  const monthsPt = [
+    'Jan','Fev','Mar','Abr','Mai','Jun','Jul','Ago','Set','Out','Nov','Dez'
   ];
 
+  const lastNMonths = (n = 6) => {
+    const res: { key: string; label: string }[] = [];
+    const now = new Date();
+    for (let i = n - 1; i >= 0; i--) {
+      const d = new Date(now.getFullYear(), now.getMonth() - i, 1);
+      const key = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}`;
+      const label = `${monthsPt[d.getMonth()]}`;
+      res.push({ key, label });
+    }
+    return res;
+  };
+
+  const months = lastNMonths(6);
+
+  // initialize monthly aggregates
+  const monthlyAgg: Record<string, { receitas: number; despesas: number }> = {};
+  months.forEach(m => (monthlyAgg[m.key] = { receitas: 0, despesas: 0 }));
+
+  (transactions || []).forEach((t) => {
+    try {
+      const d = new Date(t.date);
+      if (isNaN(d.getTime())) return;
+      const key = `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}`;
+      if (!monthlyAgg[key]) return; // ignore outside range
+  const amount = Number(t.amount ?? 0) || 0;
+      if (t.type === 'income') monthlyAgg[key].receitas += amount;
+      else if (t.type === 'expense') monthlyAgg[key].despesas += Math.abs(amount);
+      else if (t.type === 'investment') {
+        // treat investments as expense for visualization (optional)
+        monthlyAgg[key].despesas += Math.abs(amount);
+      }
+    } catch (e) {
+      // ignore parse errors
+    }
+  });
+
+  // income vs expenses per month
+  const incomeVsExpenses = months.map(m => ({
+    month: m.label,
+    receitas: Math.round(monthlyAgg[m.key].receitas),
+    despesas: Math.round(monthlyAgg[m.key].despesas),
+  }));
+
+  // balance evolution (cumulative)
+  const balanceEvolution: { month: string; saldo: number }[] = [];
+  let running = 0;
+  incomeVsExpenses.forEach(item => {
+    running += (item.receitas - item.despesas);
+    balanceEvolution.push({ month: item.month, saldo: Math.round(running) });
+  });
+
+  // category expenses (top 5)
+  const catMap: Record<string, number> = {};
+  (transactions || []).forEach(t => {
+    if (t.type !== 'expense') return;
+    const cat = t.category || 'Outros';
+  const amt = Math.abs(Number(t.amount ?? 0) || 0);
+    catMap[cat] = (catMap[cat] || 0) + amt;
+  });
+
+  const categoryArr = Object.entries(catMap).map(([name, value]) => ({ name, value }));
+  categoryArr.sort((a, b) => b.value - a.value);
+  const palette = [
+    'hsl(var(--chart-1))',
+    'hsl(var(--chart-2))',
+    'hsl(var(--chart-3))',
+    'hsl(var(--chart-4))',
+    'hsl(var(--chart-5))',
+  ];
+
+  const top = categoryArr.slice(0, 5).map((c, i) => ({ name: c.name, value: Math.round(c.value), color: palette[i % palette.length] }));
+  const others = categoryArr.slice(5).reduce((s, c) => s + c.value, 0);
+  const categoryExpenses = others > 0 ? [...top, { name: 'Outros', value: Math.round(others), color: 'hsl(var(--chart-6))' }] : top;
+
+
+
   return (
-    <div className="space-y-6 animate-fade-in max-w-7xl mx-auto">
+    <div className="space-y-6 animate-fade-in w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-0">
       {/* Desktop: Grid layout for cards */}
       {/* Header - Desktop Grid */}
       <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
         {/* Balance Card */}
         <Card className="lg:col-span-2 bg-gradient-to-r from-monevo-blue to-monevo-lightBlue border-none text-white">
-          <CardContent className="p-6">
-            <div className="flex items-center justify-between mb-6">
+          <CardContent className="p-4 sm:p-6">
+            <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 gap-3">
               <div>
                 <h1 className="text-2xl font-bold mb-1">Olá, João!</h1>
                 <p className="text-blue-100">Bem-vindo ao Monevo</p>
@@ -76,7 +199,7 @@ const Dashboard = ({ onNavigate }: DashboardProps) => {
               </div>
             </div>
             
-            <div className="bg-white/10 backdrop-blur-sm rounded-lg p-4">
+              <div className="bg-white/10 backdrop-blur-sm rounded-lg p-3 sm:p-4">
               <p className="text-blue-100 text-sm mb-1">Saldo Total</p>
               <p className="text-4xl font-bold">
                 R$ {balance.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
@@ -87,7 +210,7 @@ const Dashboard = ({ onNavigate }: DashboardProps) => {
 
         {/* Health Score Card */}
         <Card className="border-none bg-gradient-to-br from-purple-500 to-blue-600 text-white">
-          <CardContent className="p-6">
+          <CardContent className="p-4 sm:p-6">
             <div className="flex items-center justify-between mb-4">
               <div>
                 <p className="text-blue-100 text-sm mb-1">Saúde Financeira IA</p>
@@ -114,7 +237,7 @@ const Dashboard = ({ onNavigate }: DashboardProps) => {
             Insights da IA Moneva
           </CardTitle>
         </CardHeader>
-        <CardContent className="space-y-3">
+        <CardContent className="space-y-3 p-4 sm:p-6">
           {aiInsights.map((insight, index) => {
             const IconComponent = insight.icon;
             return (
@@ -138,13 +261,19 @@ const Dashboard = ({ onNavigate }: DashboardProps) => {
       </Card>
 
       {/* Main Content Grid - Desktop optimized */}
-      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
+  <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
         
         {/* Left Column - Income/Expense + Goals */}
         <div className="lg:col-span-2 space-y-6">
           {/* Income/Expense Cards */}
-          <div className="grid grid-cols-2 gap-4">
-        <Card className="border-green-200 bg-green-50">
+          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
+        <Card
+          className="border-green-200 bg-green-50 cursor-pointer"
+          onClick={() => {
+            onSetTransactionsFilter?.('income');
+            onNavigate?.('transactions');
+          }}
+        >
           <CardContent className="p-4">
             <div className="flex items-center justify-between">
               <div>
@@ -158,7 +287,13 @@ const Dashboard = ({ onNavigate }: DashboardProps) => {
           </CardContent>
         </Card>
 
-        <Card className="border-red-200 bg-red-50">
+        <Card
+          className="border-red-200 bg-red-50 cursor-pointer"
+          onClick={() => {
+            onSetTransactionsFilter?.('expense');
+            onNavigate?.('transactions');
+          }}
+        >
           <CardContent className="p-4">
             <div className="flex items-center justify-between">
               <div>
@@ -181,9 +316,17 @@ const Dashboard = ({ onNavigate }: DashboardProps) => {
                 Últimos Lançamentos
               </CardTitle>
             </CardHeader>
-            <CardContent className="space-y-3">
-              {recentTransactions.map((transaction) => (
-                <div key={transaction.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
+            <CardContent className="space-y-3 p-4 sm:p-6">
+              {recentTransactions.map((transaction) => {
+                const dateObj = new Date(transaction.date);
+                const formattedDate = isNaN(dateObj.getTime()) ? transaction.date : dateObj.toLocaleDateString('pt-BR');
+                return (
+                <div
+                  key={transaction.id}
+                  role="button"
+                  onClick={() => onNavigate?.('transactions')}
+                  className="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer"
+                >
                   <div className="flex items-center gap-3">
                     <div className={`w-3 h-3 rounded-full ${
                       transaction.type === 'income' ? 'bg-green-500' : 'bg-red-500'
@@ -197,15 +340,57 @@ const Dashboard = ({ onNavigate }: DashboardProps) => {
                     <p className={`font-bold ${
                       transaction.type === 'income' ? 'text-green-600' : 'text-red-600'
                     }`}>
-                      {transaction.type === 'income' ? '+' : ''}
-                      R$ {Math.abs(transaction.amount).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
+                      {transaction.type === 'income' ? '+' : '-'} R$ {Math.abs(transaction.amount).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
                     </p>
-                    <p className="text-xs text-gray-500">{transaction.date}</p>
+                    <p className="text-xs text-gray-500">{formattedDate}</p>
                   </div>
                 </div>
-              ))}
-            </CardContent>
+                );
+              })}
+          </CardContent>
+          
+
+          {/* Ações Rápidas */}
+          <Card className="border-blue-200 bg-gradient-to-br from-blue-50 to-indigo-50">
+            <CardHeader>
+              <CardTitle className="flex items-center gap-2 text-monevo-blue">
+                <Wallet className="h-5 w-5" />
+                Ações Rápidas
+              </CardTitle>
+            </CardHeader>
+            <CardContent className="p-4 sm:p-6">
+              <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
+                <Button 
+                  className="flex flex-col items-center gap-2 h-auto py-4 bg-white hover:bg-blue-50 border-2 border-blue-200 text-monevo-blue w-full"
+                  variant="outline"
+                  onClick={() => onNavigate?.("add")}
+                >
+                  <Plus className="h-6 w-6" />
+                  <span className="text-sm font-semibold">Nova Transação</span>
+                </Button>
+                
+                <Button 
+                  className="flex flex-col items-center gap-2 h-auto py-4 bg-white hover:bg-green-50 border-2 border-green-200 text-green-600 w-full"
+                  variant="outline"
+                  onClick={() => onNavigate?.("goals")}
+                >
+                  <Target className="h-6 w-6" />
+                  <span className="text-sm font-semibold">Ver Metas</span>
+                </Button>
+                
+                <Button 
+                  className="flex flex-col items-center gap-2 h-auto py-4 bg-white hover:bg-purple-50 border-2 border-purple-200 text-purple-600 w-full"
+                  variant="outline"
+                  onClick={() => onNavigate?.("reports")}
+                >
+                  <BarChart3 className="h-6 w-6" />
+                  <span className="text-sm font-semibold">Relatórios</span>
+                </Button>
+              </div>
+
+          </CardContent>
           </Card>
+        </Card>
         </div>
 
         {/* Right Column - AI Insights + Goals */}
@@ -218,7 +403,7 @@ const Dashboard = ({ onNavigate }: DashboardProps) => {
                 Insights da IA
               </CardTitle>
             </CardHeader>
-            <CardContent className="space-y-3">
+            <CardContent className="space-y-3 p-4 sm:p-6">
               {aiInsights.map((insight, index) => {
                 const IconComponent = insight.icon;
                 return (
@@ -249,9 +434,13 @@ const Dashboard = ({ onNavigate }: DashboardProps) => {
                 Progresso das Metas
               </CardTitle>
             </CardHeader>
-            <CardContent className="space-y-4">
-              {goals.map((goal, index) => (
-                <div key={index} className="space-y-2">
+            <CardContent className="space-y-4 p-4 sm:p-6">
+              {visibleGoals.length === 0 && (
+                <p className="text-sm text-muted-foreground">Nenhuma meta cadastrada</p>
+              )}
+
+              {visibleGoals.map((goal) => (
+                <div key={goal.id} className="space-y-2">
                   <div className="flex justify-between items-center">
                     <span className="text-sm font-medium text-gray-700">{goal.name}</span>
                     <span className="text-xs text-gray-500">
@@ -276,8 +465,130 @@ const Dashboard = ({ onNavigate }: DashboardProps) => {
           </Card>
         </div>
       </div>
+      {/* Gráficos de Análise Visual */}
+      <Card>
+        <CardHeader>
+          <CardTitle className="flex items-center gap-2 text-monevo-blue">
+            <BarChart3 className="h-5 w-5" />
+            Análise Visual
+          </CardTitle>
+        </CardHeader>
+        <CardContent>
+          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
+            
+            {/* Evolução do Saldo */}
+              <div className="space-y-2">
+              <h3 className="text-sm font-semibold text-gray-700">Evolução do Saldo</h3>
+              <div className="h-48 sm:h-64">
+                <ResponsiveContainer width="100%" height="100%">
+                  <LineChart data={balanceEvolution}>
+                    <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border))" />
+                    <XAxis 
+                      dataKey="month" 
+                      stroke="hsl(var(--muted-foreground))"
+                      style={{ fontSize: '12px' }}
+                    />
+                    <YAxis 
+                      stroke="hsl(var(--muted-foreground))"
+                      style={{ fontSize: '12px' }}
+                    />
+                    <Tooltip 
+                      contentStyle={{ 
+                        backgroundColor: 'hsl(var(--background))',
+                        border: '1px solid hsl(var(--border))',
+                        borderRadius: '8px'
+                      }}
+                    />
+                    <Line 
+                      type="monotone" 
+                      dataKey="saldo" 
+                      stroke="#2563eb" 
+                      strokeWidth={3}
+                      dot={{ fill: '#2563eb', r: 4 }}
+                    />
+                  </LineChart>
+                </ResponsiveContainer>
+              </div>
+            </div>
+
+            {/* Gastos por Categoria */}
+              <div className="space-y-2">
+              <h3 className="text-sm font-semibold text-gray-700">Gastos por Categoria</h3>
+              <div className="h-48 sm:h-64">
+                <ResponsiveContainer width="100%" height="100%">
+                  {categoryExpenses.length === 0 ? (
+                    <div className="flex items-center justify-center h-full text-sm text-muted-foreground">Nenhuma despesa por categoria</div>
+                  ) : (
+                    <PieChart>
+                      <Pie
+                        data={categoryExpenses}
+                        dataKey="value"
+                        cx="40%"
+                        cy="50%"
+                        innerRadius={36}
+                        outerRadius={80}
+                        paddingAngle={4}
+                        label={({ percent }) => `${(percent * 100).toFixed(0)}%`}
+                      >
+                        {categoryExpenses.map((entry, index) => (
+                          <Cell key={`cell-${index}`} fill={entry.color} />
+                        ))}
+                      </Pie>
+                      <Tooltip
+                        formatter={(value: number) => `R$ ${Number(value).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`}
+                        contentStyle={{
+                          backgroundColor: 'hsl(var(--background))',
+                          border: '1px solid hsl(var(--border))',
+                          borderRadius: '8px'
+                        }}
+                      />
+                      <Legend layout="vertical" verticalAlign="middle" align="right" />
+                    </PieChart>
+                  )}
+                </ResponsiveContainer>
+              </div>
+            </div>
+
+            {/* Receitas vs Despesas */}
+            <div className="space-y-2 lg:col-span-2">
+              <h3 className="text-sm font-semibold text-gray-700">Receitas vs Despesas</h3>
+              <div className="h-48 sm:h-64">
+                <ResponsiveContainer width="100%" height="100%">
+                  <BarChart data={incomeVsExpenses}>
+                    <CartesianGrid strokeDasharray="3 3" stroke="hsl(var(--border))" />
+                    <XAxis 
+                      dataKey="month" 
+                      stroke="hsl(var(--muted-foreground))"
+                      style={{ fontSize: '12px' }}
+                    />
+                    <YAxis 
+                      stroke="hsl(var(--muted-foreground))"
+                      style={{ fontSize: '12px' }}
+                    />
+                    <Tooltip 
+                      contentStyle={{ 
+                        backgroundColor: 'hsl(var(--background))',
+                        border: '1px solid hsl(var(--border))',
+                        borderRadius: '8px'
+                      }}
+                    />
+                    <Legend />
+                    <Bar dataKey="receitas" fill="#10b981" radius={[8, 8, 0, 0]} name="Receitas" />
+                    <Bar dataKey="despesas" fill="#ef4444" radius={[8, 8, 0, 0]} name="Despesas" />
+                  </BarChart>
+                </ResponsiveContainer>
+              </div>
+            </div>
+
+          </div>
+        </CardContent>
+      </Card>
     </div>
+
+
   );
 };
 
+
+
 export default Dashboard;
diff --git a/frontend/src/components/Profile.tsx b/frontend/src/components/Profile.tsx
index c47ed53..70ba456 100644
--- a/frontend/src/components/Profile.tsx
+++ b/frontend/src/components/Profile.tsx
@@ -4,8 +4,6 @@ import { Button } from "@/components/ui/button";
 import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
 import { 
   User, 
-  Settings, 
-  Bell, 
   Shield, 
   HelpCircle, 
   LogOut, 
@@ -13,6 +11,7 @@ import {
   Mail,
   Phone
 } from "lucide-react";
+import { useNavigate } from "react-router-dom";
 
 const Profile = () => {
   const user = {
@@ -23,6 +22,8 @@ const Profile = () => {
     avatar: ""
   };
 
+  const navigate = useNavigate();
+
   const menuItems = [
     {
       icon: User,
@@ -30,24 +31,12 @@ const Profile = () => {
       description: "Altere suas informações pessoais",
       action: () => console.log("Editar perfil")
     },
-    {
-      icon: Bell,
-      title: "Notificações",
-      description: "Configure suas preferências de notificação",
-      action: () => console.log("Notificações")
-    },
     {
       icon: Shield,
       title: "Segurança",
       description: "Senha e configurações de segurança",
       action: () => console.log("Segurança")
     },
-    {
-      icon: Settings,
-      title: "Configurações",
-      description: "Personalize o aplicativo",
-      action: () => console.log("Configurações")
-    },
     {
       icon: HelpCircle,
       title: "Ajuda e Suporte",
@@ -137,7 +126,7 @@ const Profile = () => {
         <CardContent className="p-4">
           <div className="text-center space-y-2">
             <h3 className="font-bold text-monevo-blue text-lg">Monevo</h3>
-            <p className="text-sm text-gray-500">Versão 1.0.0</p>
+            <p className="text-sm text-gray-500">Versão 2.0.0</p>
             <p className="text-xs text-gray-400">
               Desenvolvido com ❤️ para sua organização financeira
             </p>
@@ -149,7 +138,7 @@ const Profile = () => {
       <Button 
         variant="outline" 
         className="w-full border-red-200 text-red-600 hover:bg-red-50 hover:border-red-300 py-3"
-        onClick={() => console.log("Logout")}
+        onClick={() => { try { navigate('/auth', { replace: true }); } catch (e) { console.warn('logout nav failed', e); } }}
       >
         <LogOut className="h-5 w-5 mr-2" />
         Sair do Aplicativo
diff --git a/frontend/src/components/Reports.tsx b/frontend/src/components/Reports.tsx
index 6bb5593..edd2377 100644
--- a/frontend/src/components/Reports.tsx
+++ b/frontend/src/components/Reports.tsx
@@ -1,5 +1,7 @@
 
-import { useState } from "react";
+import { useState, useEffect } from "react";
+import { listarTransacoes } from "@/api";
+import type { Transaction as AppTransaction } from "@/contexts/AppContext";
 import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
 import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
 import { BarChart, TrendingUp, Calendar, Filter } from "lucide-react";
@@ -40,6 +42,121 @@ const Reports = () => {
     { month: "Mai", income: 9800, expenses: 3240 },
   ];
 
+  // Live data state
+  type BackendTx = AppTransaction & {
+    valor?: number;
+    tipo?: string; // 'receita' | 'despesa'
+    categoria_cache?: string;
+    categoria?: string;
+    data?: string;
+    data_criacao?: string;
+    created_at?: string;
+  };
+  const [transactions, setTransactions] = useState<BackendTx[]>([]);
+  const [loading, setLoading] = useState(false);
+  const [totalIncome, setTotalIncome] = useState(0);
+  const [totalExpenses, setTotalExpenses] = useState(0);
+  const [byCategory, setByCategory] = useState<{ category: string; amount: number; percentage: number; color?: string }[]>([]);
+  const [monthly, setMonthly] = useState<{ month: string; income: number; expenses: number }[]>([]);
+
+  useEffect(() => {
+    // compute date range from selectedPeriod
+    const now = new Date();
+    let from: Date | null = null;
+    let to: Date | null = null;
+    if (selectedPeriod === 'week') {
+      const day = now.getDay();
+      const diffToMonday = (day + 6) % 7; // monday as start
+      from = new Date(now);
+      from.setDate(now.getDate() - diffToMonday);
+      from.setHours(0,0,0,0);
+      to = new Date(from);
+      to.setDate(from.getDate() + 6);
+      to.setHours(23,59,59,999);
+    } else if (selectedPeriod === 'month') {
+      from = new Date(now.getFullYear(), now.getMonth(), 1);
+      to = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);
+    } else if (selectedPeriod === 'quarter') {
+      const q = Math.floor(now.getMonth() / 3);
+      from = new Date(now.getFullYear(), q * 3, 1);
+      to = new Date(now.getFullYear(), q * 3 + 3, 0, 23,59,59,999);
+    } else if (selectedPeriod === 'year') {
+      from = new Date(now.getFullYear(), 0, 1);
+      to = new Date(now.getFullYear(), 11, 31, 23,59,59,999);
+    }
+
+    const fetchData = async () => {
+      try {
+        setLoading(true);
+        // call backend with date_from and date_to (FastAPI expects ISO datetimes)
+  const params: Record<string, string> = {};
+        if (from) params.date_from = from.toISOString();
+        if (to) params.date_to = to.toISOString();
+        // fetch transactions from API
+        const data = await listarTransacoes(params);
+        const txs = Array.isArray(data) ? (data as BackendTx[]) : [];
+        // client-side category filter (selectedCategory uses our frontend keys)
+        const filtered: BackendTx[] = selectedCategory === 'all' ? txs : txs.filter((t: BackendTx) => {
+          const cat = String((t.categoria || t.categoria_cache || (t.category as string) || '')).toLowerCase();
+          return cat.includes(selectedCategory.toLowerCase());
+        });
+
+        setTransactions(filtered);
+
+        // totals
+  const income = filtered.filter((t: BackendTx) => t.tipo === 'receita' || t.type === 'income').reduce((s: number, t: BackendTx) => s + (Number(t.valor ?? t.amount ?? 0) || 0), 0);
+  const expenses = filtered.filter((t: BackendTx) => t.tipo === 'despesa' || t.type === 'expense').reduce((s: number, t: BackendTx) => s + Math.abs(Number(t.valor ?? t.amount ?? 0) || 0), 0);
+        setTotalIncome(income);
+        setTotalExpenses(expenses);
+
+        // by category
+        const cmap: Record<string, number> = {};
+        filtered.forEach((t: BackendTx) => {
+          const key = String(t.categoria_cache || t.categoria || (t.category as string) || 'Outros');
+          if ((t.tipo === 'despesa' || t.type === 'expense')) {
+            cmap[key] = (cmap[key] || 0) + Math.abs(Number(t.valor ?? t.amount ?? 0) || 0);
+          }
+        });
+  const catArr = Object.entries(cmap).map(([category, amount]) => ({ category, amount }));
+  const totalExp = catArr.reduce((s, c) => s + c.amount, 0) || 1;
+  const colorPalette = ['bg-red-500','bg-blue-500','bg-green-500','bg-purple-500','bg-yellow-500','bg-indigo-500'];
+  setByCategory(catArr.map((c, i) => ({ category: c.category, amount: c.amount, percentage: +(c.amount / totalExp * 100).toFixed(1), color: colorPalette[i % colorPalette.length] })));
+
+        // monthly aggregation inside selected range by month label
+        const monthMap: Record<string, { income: number; expenses: number }> = {};
+        // build months between from and to
+        if (from && to) {
+          const mstart = new Date(from.getFullYear(), from.getMonth(), 1);
+          const mend = new Date(to.getFullYear(), to.getMonth(), 1);
+          let cur = new Date(mstart);
+          while (cur <= mend) {
+            const label = cur.toLocaleString('pt-BR', { month: 'short' });
+            monthMap[label] = { income: 0, expenses: 0 };
+            cur = new Date(cur.getFullYear(), cur.getMonth() + 1, 1);
+          }
+        }
+        filtered.forEach((t: BackendTx) => {
+          const d = new Date(t.data || t.date || t.data_criacao || t.created_at || null);
+          if (isNaN(d.getTime())) return;
+          const label = d.toLocaleString('pt-BR', { month: 'short' });
+          if (!monthMap[label]) monthMap[label] = { income: 0, expenses: 0 };
+          const val = Math.abs(Number(t.valor ?? t.amount ?? 0) || 0);
+          if (t.tipo === 'receita' || t.type === 'income') monthMap[label].income += val;
+          else if (t.tipo === 'despesa' || t.type === 'expense') monthMap[label].expenses += val;
+        });
+        const monthsOut = Object.entries(monthMap).map(([month, v]) => ({ month, income: Math.round(v.income), expenses: Math.round(v.expenses) }));
+        setMonthly(monthsOut);
+
+      } catch (e) {
+        console.error('Erro ao carregar relatórios:', e);
+      } finally {
+        setLoading(false);
+      }
+    };
+
+    fetchData();
+  }, [selectedPeriod, selectedCategory]);
+
   return (
     <div className="p-4 space-y-6 animate-fade-in">
       {/* Header */}
@@ -99,8 +216,8 @@ const Reports = () => {
           <CardContent className="p-4">
             <div className="text-center">
               <p className="text-sm text-green-600 font-medium mb-1">Total Receitas</p>
-              <p className="text-2xl font-bold text-green-700">R$ 9.800</p>
-              <p className="text-xs text-green-600 mt-1">+15.3% vs mês anterior</p>
+              <p className="text-2xl font-bold text-green-700">R$ {totalIncome.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
+              <p className="text-xs text-green-600 mt-1">{loading ? 'Carregando...' : ''}</p>
             </div>
           </CardContent>
         </Card>
@@ -109,8 +226,8 @@ const Reports = () => {
           <CardContent className="p-4">
             <div className="text-center">
               <p className="text-sm text-red-600 font-medium mb-1">Total Despesas</p>
-              <p className="text-2xl font-bold text-red-700">R$ 3.240</p>
-              <p className="text-xs text-red-600 mt-1">+9.8% vs mês anterior</p>
+              <p className="text-2xl font-bold text-red-700">R$ {totalExpenses.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
+              <p className="text-xs text-red-600 mt-1">{loading ? 'Carregando...' : ''}</p>
             </div>
           </CardContent>
         </Card>
@@ -125,7 +242,7 @@ const Reports = () => {
           </CardTitle>
         </CardHeader>
         <CardContent className="space-y-4">
-          {expensesByCategory.map((item, index) => (
+          {(byCategory.length > 0 ? byCategory : expensesByCategory).map((item, index) => (
             <div key={index} className="space-y-2">
               <div className="flex justify-between items-center">
                 <span className="text-sm font-medium text-gray-700">{item.category}</span>
@@ -157,7 +274,7 @@ const Reports = () => {
         </CardHeader>
         <CardContent>
           <div className="space-y-4">
-            {monthlyData.map((data, index) => (
+            {(monthly.length > 0 ? monthly : monthlyData).map((data, index) => (
               <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                 <div className="flex items-center gap-3">
                   <Calendar className="h-4 w-4 text-monevo-blue" />
diff --git a/frontend/src/components/Transactions.tsx b/frontend/src/components/Transactions.tsx
index bd2a44c..49414f9 100644
--- a/frontend/src/components/Transactions.tsx
+++ b/frontend/src/components/Transactions.tsx
@@ -1,4 +1,4 @@
-import { useState, useMemo } from "react";
+import { useState, useMemo, useEffect } from "react";
 import { ArrowUpRight, ArrowDownRight, Filter, Search, Calendar } from "lucide-react";
 import { Card, CardContent } from "@/components/ui/card";
 import { Button } from "@/components/ui/button";
@@ -6,92 +6,28 @@ import { Input } from "@/components/ui/input";
 import { Label } from "@/components/ui/label";
 import { Popover, PopoverTrigger, PopoverContent } from "@/components/ui/popover";
 import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
+import { useApp } from "@/contexts/AppContext";
 
 interface Transaction {
   id: string;
-  type: "income" | "expense";
+  type: "income" | "expense" | "investment";
   category: string;
   description: string;
   amount: number;
   date: string;
 }
 
-const Transactions = () => {
-  const [filter, setFilter] = useState<"all" | "income" | "expense">("all");
+const Transactions = ({ initialFilter }: { initialFilter?: "all" | "income" | "expense" }) => {
+  const [filter, setFilter] = useState<"all" | "income" | "expense">(initialFilter ?? "all");
+  useEffect(() => {
+    setFilter(initialFilter ?? "all");
+  }, [initialFilter]);
   const [searchTerm, setSearchTerm] = useState("");
   const [periodOpen, setPeriodOpen] = useState(false);
   const [startDate, setStartDate] = useState<string>("");
   const [endDate, setEndDate] = useState<string>("");
 
-  const transactions: Transaction[] = useMemo(
-    () => [
-      {
-        id: "1",
-        type: "income",
-        category: "Salário",
-        description: "Salário mensal",
-        amount: 5000,
-        date: "2024-03-15",
-      },
-      {
-        id: "2",
-        type: "expense",
-        category: "Alimentação",
-        description: "Supermercado",
-        amount: 450,
-        date: "2024-03-14",
-      },
-      {
-        id: "3",
-        type: "expense",
-        category: "Transporte",
-        description: "Gasolina",
-        amount: 200,
-        date: "2024-03-13",
-      },
-      {
-        id: "4",
-        type: "income",
-        category: "Freelance",
-        description: "Projeto web",
-        amount: 1500,
-        date: "2024-03-12",
-      },
-      {
-        id: "5",
-        type: "expense",
-        category: "Lazer",
-        description: "Cinema",
-        amount: 80,
-        date: "2024-03-11",
-      },
-      {
-        id: "6",
-        type: "expense",
-        category: "Saúde",
-        description: "Farmácia",
-        amount: 120,
-        date: "2024-03-10",
-      },
-      {
-        id: "7",
-        type: "income",
-        category: "Investimentos",
-        description: "Dividendos",
-        amount: 350,
-        date: "2024-03-09",
-      },
-      {
-        id: "8",
-        type: "expense",
-        category: "Moradia",
-        description: "Aluguel",
-        amount: 1200,
-        date: "2024-03-08",
-      },
-    ],
-    []
-  );
+  const { transactions } = useApp();
 
   const filteredTransactions = transactions.filter((transaction) => {
     const matchesFilter = filter === "all" || transaction.type === filter;
diff --git a/frontend/src/contexts/AppContext.tsx b/frontend/src/contexts/AppContext.tsx
index 0ca4343..5485e4e 100644
--- a/frontend/src/contexts/AppContext.tsx
+++ b/frontend/src/contexts/AppContext.tsx
@@ -1,10 +1,8 @@
-
 import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
 import { listarMetas, criarMeta as criarMetaAPI, atualizarMeta as atualizarMetaAPI, deletarMeta as deletarMetaAPI } from '../api';
-import { toast } from 'sonner'
-
+import { toast } from 'sonner';
 
-// Interface para os dados que vêm da API
+// API meta shape
 interface ApiMeta {
   id: number;
   titulo: string;
@@ -30,6 +28,15 @@ export interface Goal {
   borderColor: string;
 }
 
+export interface Transaction {
+  id: string;
+  type: 'income' | 'expense' | 'investment';
+  category: string;
+  description: string;
+  amount: number;
+  date: string; // ISO
+}
+
 interface ActivatedPlan {
   id: string;
   title: string;
@@ -40,65 +47,62 @@ interface AppContextType {
   goals: Goal[];
   loading: boolean;
   error: string | null;
+  transactions: Transaction[];
   addGoal: (goal: Omit<Goal, 'id'>) => Promise<void>;
   updateGoal: (goalId: string, goal: Partial<Goal>) => Promise<void>;
   deleteGoal: (goalId: string) => Promise<void>;
   refreshGoals: () => Promise<void>;
+  addTransaction: (tx: Omit<Transaction, 'id'>) => Promise<void>;
+  refreshTransactions: () => Promise<void>;
   activatedPlans: ActivatedPlan[];
   activatePlan: (planId: string, planTitle: string) => void;
 }
 
 const AppContext = createContext<AppContextType | undefined>(undefined);
 
-// Mapeamento de categorias para ícones e cores
-const categoryMapping = {
-  "Viagem": { icon: "Plane", color: "text-blue-600", bgColor: "bg-blue-50", borderColor: "border-blue-200" },
-  "Quitar Dívida": { icon: "CreditCard", color: "text-red-600", bgColor: "bg-red-50", borderColor: "border-red-200" },
-  "Reserva": { icon: "PiggyBank", color: "text-green-600", bgColor: "bg-green-50", borderColor: "border-green-200" },
-  "Casa/Imóvel": { icon: "Home", color: "text-purple-600", bgColor: "bg-purple-50", borderColor: "border-purple-200" },
-  "Veículo": { icon: "Car", color: "text-orange-600", bgColor: "bg-orange-50", borderColor: "border-orange-200" },
-  "Educação": { icon: "GraduationCap", color: "text-indigo-600", bgColor: "bg-indigo-50", borderColor: "border-indigo-200" }
+// Category defaults (frontend mapping)
+const categoryMapping: Record<string, { icon: string; color: string; bgColor: string; borderColor: string }> = {
+  Viagem: { icon: 'Plane', color: 'text-blue-600', bgColor: 'bg-blue-50', borderColor: 'border-blue-200' },
+  'Quitar Dívida': { icon: 'CreditCard', color: 'text-red-600', bgColor: 'bg-red-50', borderColor: 'border-red-200' },
+  Reserva: { icon: 'PiggyBank', color: 'text-green-600', bgColor: 'bg-green-50', borderColor: 'border-green-200' },
+  'Casa/Imóvel': { icon: 'Home', color: 'text-purple-600', bgColor: 'bg-purple-50', borderColor: 'border-purple-200' },
+  Veículo: { icon: 'Car', color: 'text-orange-600', bgColor: 'bg-orange-50', borderColor: 'border-orange-200' },
+  Educação: { icon: 'GraduationCap', color: 'text-indigo-600', bgColor: 'bg-indigo-50', borderColor: 'border-indigo-200' },
 };
 
 export const AppProvider = ({ children }: { children: ReactNode }) => {
   const [goals, setGoals] = useState<Goal[]>([]);
+  const [transactions, setTransactions] = useState<Transaction[]>([]);
   const [loading, setLoading] = useState(true);
   const [error, setError] = useState<string | null>(null);
   const [activatedPlans, setActivatedPlans] = useState<ActivatedPlan[]>([]);
 
-  // Converter meta da API para formato do frontend
   const convertApiMetaToGoal = (apiMeta: ApiMeta): Goal => {
-    const categoryInfo = categoryMapping[apiMeta.categoria as keyof typeof categoryMapping] || 
-                       { icon: "Target", color: "text-gray-600", bgColor: "bg-gray-50", borderColor: "border-gray-200" };
-    
+    const categoryInfo = categoryMapping[apiMeta.categoria] || { icon: 'Target', color: 'text-gray-600', bgColor: 'bg-gray-50', borderColor: 'border-gray-200' };
     return {
-      id: apiMeta.id.toString(),
+      id: String(apiMeta.id),
       title: apiMeta.titulo,
-      description: apiMeta.descricao || "",
+      description: apiMeta.descricao || '',
       target: apiMeta.valor_objetivo,
       current: apiMeta.valor_atual,
-      deadline: apiMeta.prazo || "",
+      deadline: apiMeta.prazo || '',
       category: apiMeta.categoria,
       icon: categoryInfo.icon,
       color: categoryInfo.color,
       bgColor: categoryInfo.bgColor,
-      borderColor: categoryInfo.borderColor
+      borderColor: categoryInfo.borderColor,
     };
   };
 
-  // Converter goal do frontend para formato da API
-  const convertGoalToApiMeta = (goal: Omit<Goal, 'id'> | Partial<Goal>) => {
-    return {
-      titulo: goal.title,
-      descricao: goal.description || null,
-      categoria: goal.category,
-      valor_objetivo: goal.target,
-      valor_atual: goal.current,
-      prazo: goal.deadline || null
-    };
-  };
+  const convertGoalToApiMeta = (goal: Omit<Goal, 'id'> | Partial<Goal>) => ({
+    titulo: goal.title,
+    descricao: goal.description || null,
+    categoria: goal.category,
+    valor_objetivo: goal.target,
+    valor_atual: goal.current,
+    prazo: goal.deadline || null,
+  });
 
-  // Carregar metas do backend
   const loadGoals = async () => {
     try {
       setLoading(true);
@@ -114,7 +118,6 @@ export const AppProvider = ({ children }: { children: ReactNode }) => {
     }
   };
 
-  // Adicionar nova meta
   const addGoal = async (newGoal: Omit<Goal, 'id'>) => {
     try {
       const apiMeta = convertGoalToApiMeta(newGoal);
@@ -127,63 +130,119 @@ export const AppProvider = ({ children }: { children: ReactNode }) => {
     }
   };
 
-  // Atualizar meta existente
   const updateGoal = async (goalId: string, goalData: Partial<Goal>) => {
     try {
       const apiMeta = convertGoalToApiMeta(goalData);
       const updatedMeta = await atualizarMetaAPI(parseInt(goalId), apiMeta);
       const convertedGoal = convertApiMetaToGoal(updatedMeta);
-      setGoals(prev => prev.map(goal => goal.id === goalId ? convertedGoal : goal));
+      setGoals(prev => prev.map(g => g.id === goalId ? convertedGoal : g));
     } catch (err) {
       console.error('Erro ao atualizar meta:', err);
       throw err;
     }
   };
 
-const deleteGoal = async (goalId: string): Promise<void> => {
-  try {
-    setLoading(true)
-    await deletarMetaAPI(Number(goalId))
-    setGoals(prev => prev.filter(g => g.id !== goalId))
-    toast.success('Meta excluída com sucesso')
-  } catch (e) {
-    console.error('Erro ao excluir meta:', e)
-    toast.error('Não foi possível excluir a meta')
-  } finally {
-    setLoading(false)
-  }
-}
+  const deleteGoal = async (goalId: string) => {
+    try {
+      setLoading(true);
+      await deletarMetaAPI(Number(goalId));
+      setGoals(prev => prev.filter(g => g.id !== goalId));
+      toast.success('Meta excluída com sucesso');
+    } catch (e) {
+      console.error('Erro ao excluir meta:', e);
+      toast.error('Não foi possível excluir a meta');
+    } finally {
+      setLoading(false);
+    }
+  };
 
-  // Recarregar metas
   const refreshGoals = async () => {
     await loadGoals();
   };
 
+  const loadTransactions = async () => {
+    try {
+      const res = await fetch(`${import.meta.env.VITE_API_URL ?? 'http://127.0.0.1:8000'}/transacoes`);
+      if (!res.ok) throw new Error('API unavailable');
+      const data = await res.json();
+      const converted: Transaction[] = (data || []).map((t: any) => ({
+        id: String(t.id ?? t.usuario_id ?? Date.now()),
+        type: t.tipo === 'receita' ? 'income' : t.tipo === 'despesa' ? 'expense' : 'investment',
+        category: t.categoria || t.categoria_nome || '',
+        description: t.descricao || '',
+        amount: Number(t.valor ?? 0),
+        date: t.data || new Date().toISOString(),
+      }));
+      setTransactions(converted);
+    } catch (err) {
+      console.warn('Could not load transactions from API', err);
+    }
+  };
+
+  const addTransaction = async (tx: Omit<Transaction, 'id'>) => {
+    const tempId = String(Date.now());
+    const newTx: Transaction = { id: tempId, ...tx };
+    setTransactions(prev => [newTx, ...prev]);
+
+    try {
+      const res = await fetch(`${import.meta.env.VITE_API_URL ?? 'http://127.0.0.1:8000'}/transacoes`, {
+        method: 'POST',
+        headers: { 'Content-Type': 'application/json' },
+        body: JSON.stringify({
+          usuario_id: Number(import.meta.env.VITE_DEFAULT_USER_ID ?? 1),
+          data: tx.date,
+          valor: tx.amount,
+          tipo: tx.type === 'income' ? 'receita' : tx.type === 'expense' ? 'despesa' : 'investimento',
+          descricao: tx.description,
+          categoria: tx.category,
+        }),
+      });
+
+      if (res.ok) {
+        const created = await res.json();
+        setTransactions(prev => prev.map(t => t.id === tempId ? ({
+          id: String(created.id ?? tempId),
+          type: tx.type,
+          category: tx.category,
+          description: tx.description,
+          amount: tx.amount,
+          date: tx.date,
+        }) : t));
+      }
+    } catch (e) {
+      console.warn('Failed to post transaction to API', e);
+    }
+  };
+
+  const refreshTransactions = async () => {
+    await loadTransactions();
+  };
+
   const activatePlan = (planId: string, planTitle: string) => {
-    const plan: ActivatedPlan = {
-      id: planId,
-      title: planTitle,
-      activatedAt: new Date()
-    };
+    const plan: ActivatedPlan = { id: planId, title: planTitle, activatedAt: new Date() };
     setActivatedPlans(prev => [...prev, plan]);
   };
 
-  // Carregar metas na inicialização
   useEffect(() => {
     loadGoals();
+    loadTransactions();
+    // eslint-disable-next-line react-hooks/exhaustive-deps
   }, []);
 
   return (
-    <AppContext.Provider value={{ 
-      goals, 
-      loading, 
-      error, 
-      addGoal, 
-      updateGoal, 
-      deleteGoal, 
+    <AppContext.Provider value={{
+      goals,
+      loading,
+      error,
+      transactions,
+      addGoal,
+      updateGoal,
+      deleteGoal,
       refreshGoals,
-      activatedPlans, 
-      activatePlan 
+      addTransaction,
+      refreshTransactions,
+      activatedPlans,
+      activatePlan,
     }}>
       {children}
     </AppContext.Provider>
@@ -192,8 +251,6 @@ const deleteGoal = async (goalId: string): Promise<void> => {
 
 export const useApp = () => {
   const context = useContext(AppContext);
-  if (context === undefined) {
-    throw new Error('useApp must be used within an AppProvider');
-  }
+  if (context === undefined) throw new Error('useApp must be used within an AppProvider');
   return context;
 };
diff --git a/frontend/src/index.css b/frontend/src/index.css
index 04b01ae..b7d8386 100644
--- a/frontend/src/index.css
+++ b/frontend/src/index.css
@@ -45,6 +45,13 @@
     --sidebar-accent-foreground: 240 5.9% 10%;
     --sidebar-border: 220 13% 91%;
     --sidebar-ring: 217.2 91.2% 59.8%;
+  /* Chart palette (H S% L%) used by recharts fills via hsl(var(--chart-x)) */
+  --chart-1: 214 56% 43%; /* blue */
+  --chart-2: 146 54% 35%; /* green */
+  --chart-3: 33 100% 50%; /* orange */
+  --chart-4: 264 53% 47%; /* purple */
+  --chart-5: 0 78% 48%;   /* red */
+  --chart-6: 210 8% 40%;  /* gray/other */
   }
 
   .dark {
diff --git a/frontend/src/pages/Auth.tsx b/frontend/src/pages/Auth.tsx
index d1f7d86..98ae188 100644
--- a/frontend/src/pages/Auth.tsx
+++ b/frontend/src/pages/Auth.tsx
@@ -71,7 +71,8 @@ const Auth = () => {
       // Mock validation
       if (data.email === "teste@teste.com" && data.password === "123456") {
         toast.success("Login realizado com sucesso!");
-        navigate("/app");
+        // replace history so back button doesn't return to login
+        navigate("/index", { replace: true });
       } else {
         setError("Email ou senha incorretos");
       }
@@ -187,7 +188,7 @@ const Auth = () => {
                 type="button"
                 className="w-full"
                 disabled={isLoading}
-                onClick={() => navigate("/index")}
+                onClick={() => navigate("/onboarding", { replace: true })}
               >
                 Entrar (teste)
               </Button>
diff --git a/frontend/src/pages/Index.tsx b/frontend/src/pages/Index.tsx
index afe4ec6..5f233c9 100644
--- a/frontend/src/pages/Index.tsx
+++ b/frontend/src/pages/Index.tsx
@@ -1,5 +1,6 @@
 
 import { useState } from "react";
+import { useEffect } from "react";
 import Dashboard from "@/components/Dashboard";
 import Investments from "@/components/Investments";
 import AddTransaction from "@/components/AddTransaction";
@@ -29,12 +30,48 @@ import { useIsMobile } from "@/hooks/use-mobile";
 const Index = () => {
   const [activeTab, setActiveTab] = useState<string>("dashboard");
   const [editingGoal, setEditingGoal] = useState<Goal | null>(null);
+  const [transactionsFilter, setTransactionsFilter] = useState<"all" | "income" | "expense">("all");
   const isMobile = useIsMobile();
 
+  // Use URL hash to track tab changes so the browser back/forward navigates between tabs
+  // without leaving the /index route. This creates a natural history of visited tabs.
+  useEffect(() => {
+    // Initialize activeTab from hash if present
+    const currentHash = window.location.hash.replace('#', '');
+    if (currentHash) {
+      setActiveTab(currentHash);
+    } else {
+      // Ensure there's at least a dashboard hash without creating extra history entry
+      window.history.replaceState(null, '', '#dashboard');
+      setActiveTab('dashboard');
+    }
+
+    const onHash = () => {
+      const h = window.location.hash.replace('#', '') || 'dashboard';
+      setActiveTab(h);
+    };
+
+    window.addEventListener('hashchange', onHash);
+    return () => window.removeEventListener('hashchange', onHash);
+  }, []);
+
+  // Push a hash entry each time activeTab changes so browser back goes to previous tab
+  useEffect(() => {
+    try {
+      const h = window.location.hash.replace('#', '') || '';
+      if (activeTab && h !== activeTab) {
+        // push a new hash state (creates a history entry)
+        window.location.hash = activeTab;
+      }
+    } catch (e) {
+      // ignore
+    }
+  }, [activeTab]);
+
   const renderActiveComponent = () => {
     switch (activeTab) {
       case "dashboard":
-        return <Dashboard onNavigate={setActiveTab} />;
+        return <Dashboard onNavigate={setActiveTab} onSetTransactionsFilter={setTransactionsFilter} />;
       case "goals":
         return <Goals onNavigate={setActiveTab} onSetEditGoal={setEditingGoal} />;
       case "ai":
@@ -75,7 +112,7 @@ const Index = () => {
       case "view-progress-goal":
         return <ViewProgressGoal onClose={() => setActiveTab("ai")} />;
       case "transactions":
-        return <Transactions />;
+        return <Transactions initialFilter={transactionsFilter} />;
       default:
         return <Dashboard onNavigate={setActiveTab} />;
     }
@@ -85,10 +122,10 @@ const Index = () => {
     <AppProvider>
       {isMobile ? (
         // Mobile Layout
-        <div className="min-h-screen bg-gray-50 flex flex-col max-w-md mx-auto relative">
-          {/* Status Bar Simulation */}
-          <div className="bg-monevo-blue h-6 w-full"></div>
-          
+        <div
+          className="min-h-screen bg-gray-50 flex flex-col max-w-md mx-auto relative"
+          style={{ paddingTop: 'calc(env(safe-area-inset-top, 0px) + 12px)' }}
+        >
           {/* Main Content */}
           <div className="flex-1 pb-20 overflow-y-auto">
             {renderActiveComponent()}
diff --git a/frontend/src/pages/Landing.tsx b/frontend/src/pages/Landing.tsx
index 9eee3b5..7d72dfb 100644
--- a/frontend/src/pages/Landing.tsx
+++ b/frontend/src/pages/Landing.tsx
@@ -6,7 +6,6 @@ import {
   Target, 
   Brain, 
   Shield, 
-  Sparkles, 
   ArrowRight,
   Check
 } from "lucide-react";
@@ -51,7 +50,7 @@ const Landing = () => {
       <header className="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50">
         <div className="container mx-auto px-4 h-16 flex items-center justify-between">
           <div className="flex items-center gap-2">
-            <Sparkles className="w-6 h-6 text-primary" />
+            <img src="/favicon.png" alt="Monevo" className="w-12 h-12" />
             <span className="text-2xl font-bold bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent">
               Monevo
             </span>
@@ -77,7 +76,7 @@ const Landing = () => {
       <section className="container mx-auto px-4 py-20 md:py-32">
         <div className="max-w-4xl mx-auto text-center space-y-8 animate-fade-in">
           <div className="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-primary/10 border border-primary/20 text-sm font-medium text-primary mb-4">
-            <Sparkles className="w-4 h-4" />
+            <img src="/favicon.png" alt="Monevo" className="w-5 h-5" />
             <span>Controle financeiro inteligente</span>
           </div>
           
@@ -254,11 +253,10 @@ const Landing = () => {
         <div className="container mx-auto px-4 py-8">
           <div className="flex flex-col md:flex-row items-center justify-between gap-4">
             <div className="flex items-center gap-2">
-              <Sparkles className="w-5 h-5 text-primary" />
               <span className="font-semibold">Monevo</span>
             </div>
             <p className="text-sm text-muted-foreground">
-              © 2024 Monevo. Todos os direitos reservados.
+              © 2025 Monevo. Todos os direitos reservados.
             </p>
           </div>
         </div>
